pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:32000'
        MAVEN_HOME = '/opt/maven'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"
    }
    
    stages {
        stage('üöÄ Checkout') {
            steps {
                echo 'üéØ Starting E-Commerce Pipeline'
                checkout scm
                echo "Build #${BUILD_NUMBER}"
            }
        }
        
        stage('üîß Setup') {
            steps {
                sh '''
                    echo "üìã Environment Check"
                    java -version
                    docker --version
                    /opt/maven/bin/mvn -version || echo "Maven setup needed"
                '''
            }
        }
        
        stage('üì¶ Build Services') {
            parallel {
                stage('Product Service') {
                    steps {
                        dir('product-service') {
                            sh '''
                                echo "üèóÔ∏è Building Product Service"
                                /opt/maven/bin/mvn clean package -DskipTests
                            '''
                        }
                    }
                }
                stage('Inventory Service') {
                    steps {
                        dir('inventory-service') {
                            sh '''
                                echo "üèóÔ∏è Building Inventory Service"
                                /opt/maven/bin/mvn clean package -DskipTests
                            '''
                        }
                    }
                }
                stage('Order Service') {
                    steps {
                        dir('order-service') {
                            sh '''
                                echo "üèóÔ∏è Building Order Service"
                                /opt/maven/bin/mvn clean package -DskipTests
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üê≥ Docker Build') {
            parallel {
                stage('Product Docker') {
                    steps {
                        dir('product-service') {
                            sh '''
                                docker build -t ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} .
                                docker tag ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/product-service:latest
                            '''
                        }
                    }
                }
                stage('Inventory Docker') {
                    steps {
                        dir('inventory-service') {
                            sh '''
                                docker build -t ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} .
                                docker tag ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/inventory-service:latest
                            '''
                        }
                    }
                }
                stage('Order Docker') {
                    steps {
                        dir('order-service') {
                            sh '''
                                docker build -t ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} .
                                docker tag ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/order-service:latest
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üì§ Push Images') {
            steps {
                sh '''
                    echo "üöÄ Pushing to registry"
                    docker push ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/product-service:latest
                    docker push ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/inventory-service:latest
                    docker push ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/order-service:latest
                '''
            }
        }
        
        stage('‚ò∏Ô∏è Deploy') {
            steps {
                sh '''
                    echo "üîÑ Updating Kubernetes deployments"
                    /snap/microk8s/current/kubectl set image deployment/product-service product-service=${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER}
                    /snap/microk8s/current/kubectl set image deployment/inventory-service inventory-service=${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER}
                    /snap/microk8s/current/kubectl set image deployment/order-service order-service=${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER}
                    
                    echo "‚è≥ Waiting for rollout"
                    /snap/microk8s/current/kubectl rollout status deployment/product-service --timeout=300s
                    /snap/microk8s/current/kubectl rollout status deployment/inventory-service --timeout=300s
                    /snap/microk8s/current/kubectl rollout status deployment/order-service --timeout=300s
                '''
            }
        }
        
        stage('üîç Health Check') {
            steps {
                sh '''
                    echo "üîç Checking service health"
                    sleep 30
                    curl -f http://20.86.144.152:31309/actuator/health || echo "Product service health check failed"
                    curl -f http://20.86.144.152:31081/actuator/health || echo "Inventory service health check failed"
                    curl -f http://20.86.144.152:31004/actuator/health || echo "Order service health check failed"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'üéâ Pipeline completed'
        }
        success {
            echo '‚úÖ Pipeline succeeded'
        }
        failure {
            echo '‚ùå Pipeline failed'
        }
    }
} 