pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:32000'
        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins_home/.m2/repository'
        JAVA_HOME = '/opt/java/openjdk'
        PATH = "${env.PATH}:/opt/maven/bin:/usr/local/bin"
    }
    
    stages {
        stage('üöÄ Pipeline Start') {
            steps {
                echo 'üéØ STARTING E-COMMERCE MICROSERVICES CI/CD PIPELINE'
                echo "üìÖ Build Date: ${new Date()}"
                echo "üî¢ Build Number: ${BUILD_NUMBER}"
                echo "üåø Branch: ${env.GIT_BRANCH ?: 'main'}"
                
                // Clean workspace and checkout
                cleanWs()
                checkout scm
                
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
                
                echo "üìù Commit: ${env.GIT_COMMIT_SHORT}"
            }
        }
        
        stage('üîß Environment Check') {
            steps {
                echo 'üîß Verifying Build Environment...'
                sh '''
                    echo "üìä Environment Status:"
                    echo "Java Version:"
                    java -version
                    echo "Maven Version:"
                    mvn -version
                    echo "Docker Version:"
                    docker --version
                    echo "Current Directory:"
                    pwd
                    echo "Directory Contents:"
                    ls -la
                    echo "Backend Directory:"
                    ls -la backend/ || echo "No backend directory found"
                '''
            }
        }
        
        stage('üì¶ Build Microservices') {
            parallel {
                stage('üõçÔ∏è Product Service') {
                    steps {
                        dir('backend/product-service') {
                            echo 'üèóÔ∏è Building Product Service...'
                            sh '''
                                echo "üìÇ Current directory: $(pwd)"
                                echo "üìã Files in directory:"
                                ls -la
                                
                                if [ -f "pom.xml" ]; then
                                    echo "‚úÖ Found pom.xml, building with Maven..."
                                    mvn clean compile package -DskipTests -B ${MAVEN_OPTS}
                                    echo "üì¶ Product Service JAR built successfully"
                                    ls -la target/
                                else
                                    echo "‚ùå No pom.xml found in product-service"
                                    exit 1
                                fi
                            '''
                        }
                    }
                    post {
                        success {
                            echo '‚úÖ Product Service build completed'
                        }
                        failure {
                            echo '‚ùå Product Service build failed'
                        }
                    }
                }
                
                stage('üì¶ Inventory Service') {
                    steps {
                        dir('backend/inventory-service') {
                            echo 'üèóÔ∏è Building Inventory Service...'
                            sh '''
                                echo "üìÇ Current directory: $(pwd)"
                                echo "üìã Files in directory:"
                                ls -la
                                
                                if [ -f "pom.xml" ]; then
                                    echo "‚úÖ Found pom.xml, building with Maven..."
                                    mvn clean compile package -DskipTests -B ${MAVEN_OPTS}
                                    echo "üì¶ Inventory Service JAR built successfully"
                                    ls -la target/
                                else
                                    echo "‚ùå No pom.xml found in inventory-service"
                                    exit 1
                                fi
                            '''
                        }
                    }
                    post {
                        success {
                            echo '‚úÖ Inventory Service build completed'
                        }
                        failure {
                            echo '‚ùå Inventory Service build failed'
                        }
                    }
                }
                
                stage('üõí Order Service') {
                    steps {
                        dir('backend/order-service') {
                            echo 'üèóÔ∏è Building Order Service...'
                            sh '''
                                echo "üìÇ Current directory: $(pwd)"
                                echo "üìã Files in directory:"
                                ls -la
                                
                                if [ -f "pom.xml" ]; then
                                    echo "‚úÖ Found pom.xml, building with Maven..."
                                    mvn clean compile package -DskipTests -B ${MAVEN_OPTS}
                                    echo "üì¶ Order Service JAR built successfully"
                                    ls -la target/
                                else
                                    echo "‚ùå No pom.xml found in order-service"
                                    exit 1
                                fi
                            '''
                        }
                    }
                    post {
                        success {
                            echo '‚úÖ Order Service build completed'
                        }
                        failure {
                            echo '‚ùå Order Service build failed'
                        }
                    }
                }
            }
        }
        
        stage('üß™ Run Tests') {
            parallel {
                stage('üõçÔ∏è Test Product') {
                    steps {
                        dir('backend/product-service') {
                            echo 'üß™ Testing Product Service...'
                            sh '''
                                if [ -f "pom.xml" ]; then
                                    mvn test -B ${MAVEN_OPTS}
                                    echo "‚úÖ Product Service tests completed"
                                else
                                    echo "‚ö†Ô∏è No tests to run for Product Service"
                                fi
                            '''
                        }
                    }
                    post {
                        always {
                            junit testResults: 'backend/product-service/target/surefire-reports/*.xml', allowEmptyResults: true
                        }
                    }
                }
                
                stage('üì¶ Test Inventory') {
                    steps {
                        dir('backend/inventory-service') {
                            echo 'üß™ Testing Inventory Service...'
                            sh '''
                                if [ -f "pom.xml" ]; then
                                    mvn test -B ${MAVEN_OPTS}
                                    echo "‚úÖ Inventory Service tests completed"
                                else
                                    echo "‚ö†Ô∏è No tests to run for Inventory Service"
                                fi
                            '''
                        }
                    }
                    post {
                        always {
                            junit testResults: 'backend/inventory-service/target/surefire-reports/*.xml', allowEmptyResults: true
                        }
                    }
                }
                
                stage('üõí Test Order') {
                    steps {
                        dir('backend/order-service') {
                            echo 'üß™ Testing Order Service...'
                            sh '''
                                if [ -f "pom.xml" ]; then
                                    mvn test -B ${MAVEN_OPTS}
                                    echo "‚úÖ Order Service tests completed"
                                else
                                    echo "‚ö†Ô∏è No tests to run for Order Service"
                                fi
                            '''
                        }
                    }
                    post {
                        always {
                            junit testResults: 'backend/order-service/target/surefire-reports/*.xml', allowEmptyResults: true
                        }
                    }
                }
            }
        }
        
        stage('üê≥ Build Docker Images') {
            parallel {
                stage('üõçÔ∏è Docker Product') {
                    steps {
                        dir('backend/product-service') {
                            echo 'üê≥ Building Product Service Docker Image...'
                            sh '''
                                if [ -f "Dockerfile" ]; then
                                    docker build -t ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} .
                                    docker tag ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/product-service:latest
                                    echo "‚úÖ Product Service Docker image built"
                                else
                                    echo "‚ùå No Dockerfile found for Product Service"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
                
                stage('üì¶ Docker Inventory') {
                    steps {
                        dir('backend/inventory-service') {
                            echo 'üê≥ Building Inventory Service Docker Image...'
                            sh '''
                                if [ -f "Dockerfile" ]; then
                                    docker build -t ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} .
                                    docker tag ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/inventory-service:latest
                                    echo "‚úÖ Inventory Service Docker image built"
                                else
                                    echo "‚ùå No Dockerfile found for Inventory Service"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
                
                stage('üõí Docker Order') {
                    steps {
                        dir('backend/order-service') {
                            echo 'üê≥ Building Order Service Docker Image...'
                            sh '''
                                if [ -f "Dockerfile" ]; then
                                    docker build -t ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} .
                                    docker tag ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/order-service:latest
                                    echo "‚úÖ Order Service Docker image built"
                                else
                                    echo "‚ùå No Dockerfile found for Order Service"
                                    exit 1
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üì§ Push to Registry') {
            steps {
                echo 'üì§ Pushing Docker images to registry...'
                sh '''
                    echo "üöÄ Pushing images to ${DOCKER_REGISTRY}"
                    
                    # Push Product Service
                    docker push ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/product-service:latest
                    
                    # Push Inventory Service
                    docker push ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/inventory-service:latest
                    
                    # Push Order Service
                    docker push ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/order-service:latest
                    
                    echo "‚úÖ All images pushed successfully"
                '''
            }
        }
        
        stage('‚ò∏Ô∏è Deploy to Kubernetes') {
            steps {
                echo '‚ò∏Ô∏è Deploying to Kubernetes...'
                sh '''
                    echo "üîÑ Updating Kubernetes deployments with new images"
                    
                    # Update deployments with new image tags
                    kubectl set image deployment/product-service product-service=${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} || echo "Product service deployment not found"
                    kubectl set image deployment/inventory-service inventory-service=${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} || echo "Inventory service deployment not found"
                    kubectl set image deployment/order-service order-service=${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} || echo "Order service deployment not found"
                    
                    echo "‚è≥ Waiting for rollout to complete..."
                    kubectl rollout status deployment/product-service --timeout=300s || echo "Product service rollout timeout"
                    kubectl rollout status deployment/inventory-service --timeout=300s || echo "Inventory service rollout timeout"
                    kubectl rollout status deployment/order-service --timeout=300s || echo "Order service rollout timeout"
                    
                    echo "‚úÖ Kubernetes deployment completed"
                '''
            }
        }
        
        stage('üîç Health Check') {
            steps {
                echo 'üîç Performing health checks...'
                sh '''
                    echo "üîç Checking service health endpoints"
                    sleep 30
                    
                    # Health check for Product Service
                    curl -f http://20.86.144.152:31309/actuator/health || echo "‚ùå Product service health check failed"
                    
                    # Health check for Inventory Service
                    curl -f http://20.86.144.152:31081/actuator/health || echo "‚ùå Inventory service health check failed"
                    
                    # Health check for Order Service
                    curl -f http://20.86.144.152:31004/actuator/health || echo "‚ùå Order service health check failed"
                    
                    echo "‚úÖ Health checks completed"
                '''
            }
        }
    }
    
    post {
        always {
            echo '''
            üìä ========================================
            üìä PIPELINE EXECUTION COMPLETED
            üìä ========================================
            '''
            echo "üìÖ Timestamp: ${new Date()}"
            echo "üî¢ Build Number: ${BUILD_NUMBER}"
            echo "üìù Git Commit: ${env.GIT_COMMIT_SHORT}"
            echo "üåø Branch: ${env.GIT_BRANCH ?: 'main'}"
            
            // Archive artifacts
            archiveArtifacts artifacts: 'backend/*/target/*.jar', allowEmptyArchive: true
            
            // Clean up Docker images to save space
            sh '''
                echo "üßπ Cleaning up old Docker images"
                docker image prune -f || echo "Docker cleanup skipped"
            '''
        }
        success {
            echo '''
            ‚úÖ ========================================
            ‚úÖ PIPELINE SUCCEEDED!
            ‚úÖ ========================================
            
            üéâ All microservices built and deployed successfully
            üîó Access your services at:
            üõçÔ∏è  Product Service: http://20.86.144.152:31309
            üì¶ Inventory Service: http://20.86.144.152:31081
            üõí Order Service: http://20.86.144.152:31004
            '''
        }
        failure {
            echo '''
            ‚ùå ========================================
            ‚ùå PIPELINE FAILED!
            ‚ùå ========================================
            
            üîç TROUBLESHOOTING STEPS:
            1. Check the build logs above for specific errors
            2. Verify all dependencies are installed in Jenkins image
            3. Check Docker registry accessibility
            4. Verify Kubernetes cluster status
            5. Ensure all source files are present
            '''
        }
    }
} 