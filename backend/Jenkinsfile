pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = 'localhost:32000'
        MAVEN_HOME = '/opt/maven'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}:/usr/local/bin"
        MAVEN_OPTS = '-Dmaven.repo.local=/var/jenkins_home/.m2/repository'
    }
    
    stages {
        stage('üöÄ Pipeline Start') {
            steps {
                echo 'üéØ STARTING E-COMMERCE MICROSERVICES CI/CD PIPELINE'
                echo "üìÖ Build Date: ${new Date()}"
                echo "üî¢ Build Number: ${BUILD_NUMBER}"
                echo "üåø Branch: ${env.BRANCH_NAME ?: 'main'}"
                
                // Clean workspace and checkout fresh code
                cleanWs()
                checkout scm
                
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                }
                echo "üìù Commit: ${env.GIT_COMMIT_SHORT}"
            }
        }
        
        stage('üîß Environment Verification') {
            steps {
                echo 'üîß Verifying Build Environment...'
                sh '''
                    echo "üìä Environment Status:"
                    echo "Maven Home: $MAVEN_HOME"
                    echo "Java Version:"
                    java -version
                    echo "Maven Version:"
                    mvn --version
                    echo "Docker Version:"
                    docker --version
                    echo "kubectl Version:"
                    kubectl version --client
                    echo "Trivy Version:"
                    trivy --version
                '''
            }
        }
        
        stage('üì¶ Build Microservices') {
            parallel {
                stage('üõçÔ∏è Product Service') {
                    steps {
                        dir('backend/product-service') {
                            sh '''
                                echo "üèóÔ∏è Building Product Service..."
                                mvn clean compile package -DskipTests
                                echo "‚úÖ Product Service build completed"
                            '''
                        }
                    }
                }
                stage('üì¶ Inventory Service') {
                    steps {
                        dir('backend/inventory-service') {
                            sh '''
                                echo "üèóÔ∏è Building Inventory Service..."
                                mvn clean compile package -DskipTests
                                echo "‚úÖ Inventory Service build completed"
                            '''
                        }
                    }
                }
                stage('üõí Order Service') {
                    steps {
                        dir('backend/order-service') {
                            sh '''
                                echo "üèóÔ∏è Building Order Service..."
                                mvn clean compile package -DskipTests
                                echo "‚úÖ Order Service build completed"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üß™ Run Tests') {
            parallel {
                stage('üõçÔ∏è Test Product') {
                    steps {
                        dir('backend/product-service') {
                            sh '''
                                echo "üß™ Running Product Service tests..."
                                mvn test
                            '''
                        }
                    }
                    post {
                        always {
                            junit testResults: 'backend/product-service/target/surefire-reports/*.xml', allowEmptyResults: true
                        }
                    }
                }
                stage('üì¶ Test Inventory') {
                    steps {
                        dir('backend/inventory-service') {
                            sh '''
                                echo "üß™ Running Inventory Service tests..."
                                mvn test -Dspring.profiles.active=test
                            '''
                        }
                    }
                    post {
                        always {
                            junit testResults: 'backend/inventory-service/target/surefire-reports/*.xml', allowEmptyResults: true
                        }
                    }
                }
                stage('üõí Test Order') {
                    steps {
                        dir('backend/order-service') {
                            sh '''
                                echo "üß™ Running Order Service tests..."
                                mvn test -Dspring.profiles.active=test
                            '''
                        }
                    }
                    post {
                        always {
                            junit testResults: 'backend/order-service/target/surefire-reports/*.xml', allowEmptyResults: true
                        }
                    }
                }
            }
        }
        
        stage('üê≥ Build Docker Images') {
            parallel {
                stage('üõçÔ∏è Docker Product') {
                    steps {
                        dir('backend/product-service') {
                            sh '''
                                echo "üê≥ Building Product Service Docker image..."
                                docker build -t ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} .
                                docker tag ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/product-service:latest
                                echo "‚úÖ Product Service Docker image built"
                            '''
                        }
                    }
                }
                stage('üì¶ Docker Inventory') {
                    steps {
                        dir('backend/inventory-service') {
                            sh '''
                                echo "üê≥ Building Inventory Service Docker image..."
                                docker build -t ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} .
                                docker tag ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/inventory-service:latest
                                echo "‚úÖ Inventory Service Docker image built"
                            '''
                        }
                    }
                }
                stage('üõí Docker Order') {
                    steps {
                        dir('backend/order-service') {
                            sh '''
                                echo "üê≥ Building Order Service Docker image..."
                                docker build -t ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} .
                                docker tag ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} ${DOCKER_REGISTRY}/order-service:latest
                                echo "‚úÖ Order Service Docker image built"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üîí Security Scanning') {
            parallel {
                stage('üõçÔ∏è Scan Product Service') {
                    steps {
                        script {
                            try {
                                sh '''
                                    echo "üîí Scanning Product Service image for vulnerabilities..."
                                    echo "üì• Updating Trivy database..."
                                    trivy image --download-db-only --cache-dir /tmp/trivy-cache || echo "‚ö†Ô∏è DB update failed, using cached version"
                                    echo "üîç Scanning image..."
                                    trivy image --format table --exit-code 0 --cache-dir /tmp/trivy-cache ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} || echo "‚ö†Ô∏è Scan failed, continuing pipeline"
                                    trivy image --format json --output product-service-scan.json --cache-dir /tmp/trivy-cache ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} || echo "‚ö†Ô∏è JSON scan failed"
                                    echo "‚úÖ Product Service security scan completed"
                                '''
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Security scan failed: ${e.message}"
                                sh 'echo "Security scan failed" > product-service-scan.json'
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'product-service-scan.json', allowEmptyArchive: true
                        }
                    }
                }
                stage('üì¶ Scan Inventory Service') {
                    steps {
                        script {
                            try {
                                sh '''
                                    echo "üîí Scanning Inventory Service image for vulnerabilities..."
                                    echo "üîç Scanning image..."
                                    trivy image --format table --exit-code 0 --cache-dir /tmp/trivy-cache ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} || echo "‚ö†Ô∏è Scan failed, continuing pipeline"
                                    trivy image --format json --output inventory-service-scan.json --cache-dir /tmp/trivy-cache ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} || echo "‚ö†Ô∏è JSON scan failed"
                                    echo "‚úÖ Inventory Service security scan completed"
                                '''
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Security scan failed: ${e.message}"
                                sh 'echo "Security scan failed" > inventory-service-scan.json'
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'inventory-service-scan.json', allowEmptyArchive: true
                        }
                    }
                }
                stage('üõí Scan Order Service') {
                    steps {
                        script {
                            try {
                                sh '''
                                    echo "üîí Scanning Order Service image for vulnerabilities..."
                                    echo "üîç Scanning image..."
                                    trivy image --format table --exit-code 0 --cache-dir /tmp/trivy-cache ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} || echo "‚ö†Ô∏è Scan failed, continuing pipeline"
                                    trivy image --format json --output order-service-scan.json --cache-dir /tmp/trivy-cache ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} || echo "‚ö†Ô∏è JSON scan failed"
                                    echo "‚úÖ Order Service security scan completed"
                                '''
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Security scan failed: ${e.message}"
                                sh 'echo "Security scan failed" > order-service-scan.json'
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'order-service-scan.json', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('üì§ Push to Registry') {
            steps {
                sh '''
                    echo "üì§ Pushing Docker images to registry..."
                    
                    # Push Product Service
                    docker push ${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/product-service:latest
                    
                    # Push Inventory Service
                    docker push ${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/inventory-service:latest
                    
                    # Push Order Service
                    docker push ${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER}
                    docker push ${DOCKER_REGISTRY}/order-service:latest
                    
                    echo "‚úÖ All images pushed successfully"
                '''
            }
        }
        
        stage('‚ò∏Ô∏è Deploy to Kubernetes') {
            steps {
                sh '''
                    echo "‚ò∏Ô∏è Deploying to Kubernetes cluster..."
                    
                    # Update deployments with new image tags
                    kubectl set image deployment/product-service product-service=${DOCKER_REGISTRY}/product-service:${BUILD_NUMBER} || echo "Product deployment update failed"
                    kubectl set image deployment/inventory-service inventory-service=${DOCKER_REGISTRY}/inventory-service:${BUILD_NUMBER} || echo "Inventory deployment update failed"
                    kubectl set image deployment/order-service order-service=${DOCKER_REGISTRY}/order-service:${BUILD_NUMBER} || echo "Order deployment update failed"
                    
                    # Wait for rollouts to complete
                    echo "‚è≥ Waiting for deployments to complete..."
                    kubectl rollout status deployment/product-service --timeout=300s || echo "Product rollout timeout"
                    kubectl rollout status deployment/inventory-service --timeout=300s || echo "Inventory rollout timeout"
                    kubectl rollout status deployment/order-service --timeout=300s || echo "Order rollout timeout"
                    
                    echo "‚úÖ Kubernetes deployment completed"
                '''
            }
        }
        
        stage('üîç Health Check & Verification') {
            steps {
                sh '''
                    echo "üîç Performing health checks..."
                    
                    # Wait for services to be ready
                    sleep 30
                    
                    # Health check endpoints
                    echo "Checking Product Service health..."
                    curl -f http://20.86.144.152:31309/actuator/health || echo "‚ùå Product service health check failed"
                    
                    echo "Checking Inventory Service health..."
                    curl -f http://20.86.144.152:31081/actuator/health || echo "‚ùå Inventory service health check failed"
                    
                    echo "Checking Order Service health..."
                    curl -f http://20.86.144.152:31004/actuator/health || echo "‚ùå Order service health check failed"
                    
                    # Check Kubernetes pod status
                    echo "üìä Kubernetes Pod Status:"
                    kubectl get pods -l app=product-service
                    kubectl get pods -l app=inventory-service
                    kubectl get pods -l app=order-service
                    
                    echo "‚úÖ Health checks completed"
                '''
            }
        }
        
        stage('üßπ Cleanup') {
            steps {
                sh '''
                    echo "üßπ Cleaning up build artifacts..."
                    
                    # Remove old Docker images to save space
                    docker image prune -f
                    
                    # Clean Maven cache if needed
                    # mvn dependency:purge-local-repository -DactTransitively=false -DreResolve=false
                    
                    echo "‚úÖ Cleanup completed"
                '''
            }
        }
    }
    
    post {
        always {
            echo '''
            üìä ========================================
            üìä PIPELINE EXECUTION COMPLETED
            üìä ========================================
            
            üìÖ Timestamp: ''' + new Date() + '''
            üî¢ Build Number: ''' + env.BUILD_NUMBER + '''
            üìù Git Commit: ''' + env.GIT_COMMIT_SHORT + '''
            üåø Branch: ''' + (env.BRANCH_NAME ?: 'main') + '''
            ‚è±Ô∏è Duration: ''' + currentBuild.durationString + '''
            
            üìã Workspace cleaned and ready for next build
            '''
            
            script {
                try {
                    archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
                    echo 'üì¶ Build artifacts archived'
                } catch (Exception e) {
                    echo "üì¶ No artifacts to archive: ${e.message}"
                }
            }
        }
        success {
            echo '''
                ‚úÖ ========================================
                ‚úÖ PIPELINE SUCCEEDED!
                ‚úÖ ========================================
                
                üéâ All microservices built and deployed successfully
                üöÄ Services are running on Kubernetes cluster
                üìä Health checks passed
                
                üîó Access your services:
                ‚Ä¢ Product Service: http://20.86.144.152:31309
                ‚Ä¢ Inventory Service: http://20.86.144.152:31081
                ‚Ä¢ Order Service: http://20.86.144.152:31004
                '''
        }
        failure {
            script {
                echo '''
                ‚ùå ========================================
                ‚ùå PIPELINE FAILED!
                ‚ùå ========================================
                
                üìä FAILURE SUMMARY:
                ‚ùå Build Number: ''' + env.BUILD_NUMBER + '''
                ‚ùå Duration: ''' + currentBuild.durationString + '''
                ‚ùå Git Commit: ''' + env.GIT_COMMIT_SHORT + '''
                
                üîç TROUBLESHOOTING STEPS:
                1. Check the build logs above for specific errors
                2. Verify Docker registry is accessible
                3. Check Kubernetes cluster status
                4. Ensure all dependencies are available
                5. Review application configuration
                
                üìû Need help? Check the Jenkins console output for detailed error messages.
                '''
            }
        }
        unstable {
            echo '‚ö†Ô∏è Pipeline completed with warnings - check test results'
        }
    }
} 